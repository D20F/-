(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{354:function(n,t,s){"use strict";s.r(t);var i=s(43),a=Object(i.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[n._v("#")]),n._v(" Nginx")]),n._v(" "),s("h2",{attrs:{id:"nginx-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-2"}},[n._v("#")]),n._v(" Nginx")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("yum install nginx -y 安装nginx 服务器\n修改nginx配置文件\nvi /etc/nginx/nginx.conf \n")])])]),s("h2",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[n._v("#")]),n._v(" 常用命令")]),n._v(" "),s("p",[n._v("nginx            # 启动服务\nnginx -s reload  # 向主进程发送信号，重新加载配置文件，热重启\nnginx -s reopen  # 重启 Nginx\nnginx -s stop    # 快速关闭\nnginx -s quit    # 等待工作进程处理完成后关闭\nnginx -T         # 查看当前 Nginx 最终的配置\nnginx -t -c <配置路径>    # 检查配置是否有问题，如果已经在配置目录，则不需要-c")]),n._v(" "),s("p",[n._v("systemctl start nginx    # 启动 Nginx\nsystemctl stop nginx     # 停止 Nginx\nsystemctl restart nginx  # 重启 Nginx\nsystemctl reload nginx   # 重新加载 Nginx，用于修改配置后\nsystemctl enable nginx   # 设置开机启动 Nginx\nsystemctl disable nginx  # 关闭开机启动 Nginx\nsystemctl status nginx   # 查看 Nginx 运行状态")]),n._v(" "),s("h2",{attrs:{id:"其他操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他操作"}},[n._v("#")]),n._v(" 其他操作")]),n._v(" "),s("p",[n._v("nginx日志路径\n/var/log/nginx")]),n._v(" "),s("p",[n._v("查看nginx进程\nps -ef|grep nginx")]),n._v(" "),s("p",[n._v("杀死进程\nkill -TERM 2132")]),n._v(" "),s("p",[n._v("强制停止\npkill -9 nginx")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("root     /root/test/xiaofang/express/dist;\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);